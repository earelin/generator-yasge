buildscript {    
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${gradleSpotBugsVersion}"
<% if (components.includes('REST Client')) { -%>
        classpath "io.swagger:swagger-codegen:${swaggerCodegenVersion}"
<% } -%>
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'pmd'

apply from: 'gradle/docker.gradle'

group = '<%- projectGroup %>'
version = '0.0.1-SNAPSHOT'
description = '<%- projectDescription %>'

sourceCompatibility = <%- javaVersion %>
targetCompatibility = <%- javaVersion %>

compileJava.options*.compilerArgs = ["-Xlint:all"]
compileTestJava.options*.compilerArgs = ["-Xlint:all"]

<% if (webServer) { -%>
configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}
<% } -%>

repositories {
	mavenCentral()
}

dependencies {
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleToolVersion}"

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    runtimeOnly "org.springframework.boot:spring-boot-devtools"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
<% if (springDataEnabled && springDataRepositoryType === 'RDMS') { -%>
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'      
<% } -%>
<% if (springDataEnabled && springDataRepository === 'MySQL') { -%>
    runtimeOnly "org.flywaydb:flyway-core:${flywayVersion}"
    runtimeOnly "com.h2database:h2:${h2DatabaseVersion}"
    runtimeOnly 'mysql:mysql-connector-java'    
<% } -%>
<% if (springDataEnabled && springDataRepository === 'ElasticSearch') { -%>
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
<% } -%>
<% if (!springDataEnabled && components.includes('ElasticSearch')) { -%>
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticSearchVersion}"
<% } -%>
<% if (springDataEnabled && springDataRepository === 'Redis') { -%>
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
<% } -%>
<% if (springMessagingEnabled && springDataRepository === 'AWS Message Queue') { -%>
    implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging'
<% } -%>
<% if (springMessagingEnabled && springDataRepository === 'GCP Messaging') { -%>
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-pubsub'
<% } -%>
<% if (webServer) { -%>
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
<% } -%>
<% if (components.includes('AWS S3')) { -%>
    implementation "com.amazonaws:aws-java-sdk-s3:${awsVersion}"
<% } -%>
<% if (components.includes('GCP Storage')) { -%>
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-storage'
<% } -%>
<% if (components.includes('Lombok')) { -%>
    compileOnly 'org.projectlombok:lombok'
<% } -%>
<% if (components.includes('REST Client')) { -%>
    implementation 'org.springframework.cloud:spring-cloud-starter-hystrix'
    implementation 'org.springframework.cloud:spring-cloud-starter-feign'
<% } -%>
<% if (components.includes('REST Server')) { -%>
    implementation "io.springfox:springfox-swagger2:${springfoxSwagger2Version}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxSwagger2Version}"
<% } -%>
<% if (components.includes('Web Server')) { -%>
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
<% } -%>
}

checkstyle {
    configFile = file("${project.rootDir}/checkstyle.xml")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

pmd {
    ignoreFailures = true
}

spotbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

defaultTasks 'bootRun'
